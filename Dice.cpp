#include <iostream> //used for basic I/O stream
#include <cstdlib> // used for various functions including rand()
#include <ctime> //used to seed the rand() generator
#include <sstream> //used to convert numbers to strings and back

using namespace std; //standard name space

//various variables
int AImoney, Pmoney, Pscore, AIscore, lastnum, Pbet, G_difficulty;
bool AIpass, Ppass, AIbust, Pbust, debug = false;

double version = 1.2; //game version

void say(string msg) //got lazy and didnt want to type cout or endl
{
    cout << msg << endl;
    return;
}

void Globals() //displays global vars and their value
{
    //for debug purposes ONLY
    ostringstream I_AImoney, I_Pmoney, I_Pscore, I_AIscore, I_lastnum, I_Pbet, B_AIpass, B_Ppass, B_AIbust, B_Pbust, B_debug, D_version, S_difficulty;
    I_AImoney << AImoney;
    I_Pmoney << Pmoney;
    I_Pscore << Pscore;
    I_AIscore << AIscore;
    I_lastnum << lastnum;
    I_Pbet << Pbet;
    B_AIpass << AIpass;
    B_Ppass << Ppass;
    B_AIbust << AIbust;
    B_Pbust << Pbust;
    B_debug << debug;
    D_version << version;
    S_difficulty << G_difficulty;
    say("int AImoney = " + I_AImoney.str());
    say("int Pmoney = " + I_Pmoney.str());
    say("int Pscore = " + I_Pscore.str());
    say("int AIscore = " + I_AIscore.str());
    say("int lastnum = " + I_lastnum.str());
    say("int Pbet = " + I_Pbet.str());
    say("\nbool AIpass = " + B_AIpass.str());
    say("bool Ppass = " + B_Ppass.str());
    say("bool AIbust = " + B_AIbust.str());
    say("bool Pbust = " + B_Pbust.str());
    say("bool debug = " + B_debug.str());
    say("\ndouble version = " + D_version.str());
    say("\nstring difficulty = " + S_difficulty.str());
    say("\nPress [ENTER] to exit back to last function...");
    cin.ignore();
    return;
}

int getran() //gets a random number generated by ctime
{
    srand(time(NULL));
    int ran = rand() - rand();
    if (ran < 0)
        {ran *= -1;}
    return ran;
}



int getdie() //gets a random number from 1 to 6
{
    int newnum;
    int num = getran() % 600;
    num = num % 5 + 1;
    while (num == lastnum)
        {
            newnum = getran();
            newnum = newnum % 600;
            newnum = newnum % 5 + 1;
            num = newnum;
        }
    lastnum = num;
    return num;
}

int setdifficulty() //sets game difficulty
{
    int difficultylvl;
    string difficulty;
    bool state = false;
    string input;
    say("select your difficulty.");
    say("easy - start with $300 and AI has same roll chances as you.");
    say("normal - start with $200 and AI has higher roll chances.");
    say("hard - start with $100 and I has near perfect rolls.");
    while (state != true)
        {
            cin >> input;
            if (input == "easy")
                {difficultylvl = 1; AImoney = 300; Pmoney = 300; state = true;}
            if (input == "normal")
                {difficultylvl = 2; AImoney = 300; Pmoney = 200; state = true;}
            if (input == "hard")
                {difficultylvl = 3; AImoney = 300; Pmoney = 100; state = true;}
        }
    if ((difficultylvl !=1) && (difficultylvl != 2) && (difficultylvl != 3))
        {say("ERROR AT \'int setdifficulty()\'"); Globals(); exit(2);}
    difficulty = input;
    G_difficulty = difficultylvl;
    return difficultylvl;
}

int easyroll() //easy difficulty dice AI
{
    int roll = getdie() + getdie();
    return roll;
}

int normalroll() //normal difficulty dice AI
{
    int roll1 = getran() % 11 + 1;
    int roll2 = getran() % 11 + 1;
    if (AIscore + roll1 > 21)
        {roll1 /= 2;}
    while (roll1 > 6)
        {--roll1;}
    if (AIscore + roll2 > 21)
        {roll2 /= 2;}
    while (roll2 > 6)
        {--roll2;}
    int roll = roll1 + roll2;
    return roll;
}

int hardroll() //hard difficulty dice AI
{
    int loops;
    int roll1 = getran() % 11 + 1;
    int roll2 = getran() % 11 + 1;
    if (roll1 > 6)
        {roll1 /= 2;}
    if (roll2 > 6)
        {roll2 /= 2;}
    loops = 0;
    bool state = false;
    while (state != true)
        {
            bool action = false;
            if (AIscore + roll1 > 21)
                {
                    if (roll1 > 1)
                        {--roll1; ++loops; action = true;}
                }
            if (AIscore + roll1 < 21)
                {
                    if (roll1 < 7)
                        {++roll1; ++loops; action = true;}
                }
            if (loops = 3)
                {state = true;}
            if (action == false);
                {state = true;}
        }
    state = false;
    loops = 0;
    while (state != true)
        {
            bool action = false;
            if (AIscore + roll2 > 21)
                {
                    if (roll2 > 1)
                        {--roll2; ++loops; action = true;}
                }
            if (AIscore + roll2 < 21)
                {
                    if (roll2 < 7)
                        {++roll2; ++loops; action = true;}
                }
            if (loops = 3)
                {state = true;}
            if (action == false);
                {state = true;}
        }
    int roll = roll1 + roll2;
    return roll;
}

int AIroll(int mode) //selects which AI to use based on given difficulty
{
    int roll;
    if (mode == 1)
        {roll = easyroll();}
    if (mode == 2)
        {roll = normalroll();}
    if (mode == 3)
        {roll = hardroll();}
    return roll;
}

void AI(int lvl) //base AI with turn and decision implements
{
    ostringstream level;
    level << lvl;
    bool done = false;
    say("it is the AI's turn");
    if (AIscore >= (16 + lvl))
        {
            if (AIscore < 22)
                {say("AI passes."); AIpass = true; done = true;}
        }
    if (AIscore > 21)
        {say("AI busts!"); AIpass = true; done = true; AIbust = true;}
    if (AIscore < 16)
        {
            say("AI rolls");
            AIscore += AIroll(lvl);
            done = true;
        }
    if (done == false)
        {say("ERROR AT \'int AI(" + level.str() + ")\'"); Globals(); exit(2);}
    say("AI's turn is over.");
    return;
}

void Proll() //players turn. decides wether to roll or pass
{
    if (Pscore > 21)
        {say("you broke."); Pbust = true; return;}
    ostringstream convert, convert1;
    convert << Pscore;
    say("it is your turn.");
    say("your current total is " + convert.str() + ".");
    say("pass or roll?");
    bool state = false;
    string input;
    while (state != true)
        {
            cin >> input;
            if ((input == "roll") || (input == "pass") || (input == "globals"))
                {state = true;}
        }
    if (input == "roll")
        {
            ostringstream one, two;
            int roll1 = getdie();
            int roll2 = getdie();
            one << roll1;
            two << roll2;
            say("you rolled a " + one.str() + " and a " + two.str() + ".");
            Pscore += roll1 + roll2;
            convert1 << Pscore;
            say("your total score is " + convert1.str() + ".");
            if (Pscore > 21)
                {say("you bust!"); Pbust = true;}
            say("your turn is over.");
        }
    if (input == "pass")
        {say("you passed"); Ppass = true;}
    if ((input == "globals") && (debug == true))
        {Globals(); Proll();}
    if ((input == "globals") && (debug != true))
        {say("you need to be in debug mode to use this!"); Proll();}
    return;
}

int getresult() //finds out who won the round
{
    ostringstream Pstat, AIstat;
    Pstat << Pscore;
    AIstat << AIscore;
    if (Pscore > AIscore)
        {
            if (Pscore < 22)
                {
                    say("you won!");
                    say("your score was " + Pstat.str() + ".");
                    say("AI's score was " + AIstat.str() + ".");
                    return 1;
                }
        }
    if (AIscore > Pscore)
        {
            if (AIscore < 22)
                {
                    say("you lost.");
                    say("your score was " + Pstat.str() + ".");
                    say("AI's score was " + AIstat.str() + ".");
                    return 0;
                }
        }
    if (AIscore == Pscore)
        {
            say("it was a draw. nobody wins.");
            say("your score was " + Pstat.str() + ".");
            say("AI's score was " + AIstat.str() + ".");
            return 2;
        }
    if (AIscore > 21)
        {
           if (Pscore < 22)
               {
                    say("you won!");
                    say("your score was " + Pstat.str() + ".");
                    say("AI's score was " + AIstat.str() + ".");
                    return 1;
               }
        }
    if (Pscore > 21)
       {
           if (AIscore < 22)
               {
                    say("you lost.");
                    say("your score was " + Pstat.str() + ".");
                    say("AI's score was " + AIstat.str() + ".");
                    return 0;
               }
       }
    if (AIscore > 21)
        {
            if (Pscore > 21)
                {
                    say("you both bust.");
                    say("it was a draw. nobody wins.");
                    say("your score was " + Pstat.str() + ".");
                    say("AI's score was " + AIstat.str() + ".");
                    return 2;
                }
        }
    say("ERROR!");
    say("an error occured at \'int getresult()\'");
    Globals();
    exit(2);
}

int bet() //player betting instance
{
    int limit, mlimit, lPbet;
    ostringstream maxlimit, minlimit;
    if (Pmoney = AImoney)
        {limit = Pmoney; maxlimit << limit;}
    if (Pmoney > AImoney)
        {limit = AImoney; maxlimit << limit;}
    if (AImoney > Pmoney)
        {limit = Pmoney; maxlimit << limit;}
    if ((Pmoney * 0.25) < 1)
        {return 0;}
    mlimit = Pmoney * 0.25;
    minlimit << mlimit;
    mlimit -= 1;
    limit += 1;
    say("place your bet.");
    say ("$" + minlimit.str() + " to $" + maxlimit.str() + ".");
    while (true)
        {
            cin >> lPbet;
            if (lPbet > mlimit)
                {
                    if (lPbet < limit)
                        {return lPbet;}
                }
            say("invalid number. try again.");
        }
}

int gameloop(int dif) //main game loop
{
    ostringstream set;
    set << dif;
    Ppass = false; AIpass = false; Pbust = false; AIbust = false;
    Pscore = 0; AIscore = 0;
    int stat = 3; int lvl = dif;
    bool state = false;
    say("you will roll 2 dice and attempt to acheive 21 without breaking 21.");
    say("the AI will always meet your bet as long as it has the money to.");
    say("if the AI cannot meet your bet, you will be limited to bet only less than his current money.");
    say("if both you and the AI pass, the game will automatically end and you will be shown the reslts.");
    say("if either of you busts, the game will also end.");
    if (Pscore != 0 || AIscore != 0)
        {say("ERROR AT \'int gameloop(" + set.str() + ")\'"); Globals(); exit(2);}
    while (state != true)
        {
            Proll();
            AI(lvl);
            if (Ppass == true)
                {
                    if (AIpass == true)
                        {stat = getresult(); state = true;}
                }
            if (AIbust == true)
                {stat = getresult(); state = true;}
            if (Pbust == true)
                {stat = getresult(); state = true;}
        }
    return stat;
}

int main() //introduction to dice
{
    int winner, mode;
    bool decide, win, output, state;
    string input;
    ostringstream convert, S_mode;
    convert << version;
    S_mode << mode;
    say("version: " + convert.str() + " (betting implemented)");
    say("this is dice.\nthe point of the game is similar to 21.");
    say("you must roll to or as close to, but not over, 21.");
    say("would you like to play?");
    while (state != true)
        {
            cin >> input;
            if (input == "yes")
                {output = true; state = true;}
            if (input == "no")
                {output = false; state = true;}
            if (input == "DEBUG")
                {output = true; state = true; debug = true;}
        }
    if (output == false)
        {exit(1);}
    mode = setdifficulty();
    while (true)
        {
            if (AImoney < 1)
                {win = true; break;}
            Pbet = bet();
            if (Pbet = 0)
                {win = false; break;}
            winner = 3;
            winner = gameloop(mode);
            if (winner == 0)
                {say("You lost this round."); AImoney = (AImoney + Pbet); Pmoney = (Pmoney - Pbet);}
            if (winner == 1)
                {say("You won this round"); AImoney = (AImoney - Pbet); Pmoney = (Pmoney + Pbet);}
           if (winner == 2)
                {
                    say("The round was a tie");
                }
           if (winner == 3)
                {
                    say("ERROR!!!");
                    say("an error occured at \"int gameloop(" + S_mode.str() + ")\"");
                }
        }
    if (win == true)
        {say("you won!!!");} else {say("you lost!");}
    say("game over.");
    say("thanks for playing!");
    say("created and coded by: Kazzie Higashi");
    exit(1);
}
